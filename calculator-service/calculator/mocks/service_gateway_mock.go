// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/lucas625/Mastership/calculator-service/calculator"
	"sync"
)

// Ensure, that ServiceGatewayMock does implement calculator.ServiceGateway.
// If this is not the case, regenerate this file with moq.
var _ calculator.ServiceGateway = &ServiceGatewayMock{}

// ServiceGatewayMock is a mock implementation of calculator.ServiceGateway.
//
//	func TestSomethingThatUsesServiceGateway(t *testing.T) {
//
//		// make and configure a mocked calculator.ServiceGateway
//		mockedServiceGateway := &ServiceGatewayMock{
//			ServeFunc: func() error {
//				panic("mock out the Serve method")
//			},
//		}
//
//		// use mockedServiceGateway in code that requires calculator.ServiceGateway
//		// and then make assertions.
//
//	}
type ServiceGatewayMock struct {
	// ServeFunc mocks the Serve method.
	ServeFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Serve holds details about calls to the Serve method.
		Serve []struct {
		}
	}
	lockServe sync.RWMutex
}

// Serve calls ServeFunc.
func (mock *ServiceGatewayMock) Serve() error {
	if mock.ServeFunc == nil {
		panic("ServiceGatewayMock.ServeFunc: method is nil but ServiceGateway.Serve was just called")
	}
	callInfo := struct {
	}{}
	mock.lockServe.Lock()
	mock.calls.Serve = append(mock.calls.Serve, callInfo)
	mock.lockServe.Unlock()
	return mock.ServeFunc()
}

// ServeCalls gets all the calls that were made to Serve.
// Check the length with:
//
//	len(mockedServiceGateway.ServeCalls())
func (mock *ServiceGatewayMock) ServeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockServe.RLock()
	calls = mock.calls.Serve
	mock.lockServe.RUnlock()
	return calls
}
