// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package calculator

import (
	"sync"
)

// Ensure, that ServiceGatewayMock does implement ServiceGateway.
// If this is not the case, regenerate this file with moq.
var _ ServiceGateway = &ServiceGatewayMock{}

// ServiceGatewayMock is a mock implementation of ServiceGateway.
//
//	func TestSomethingThatUsesServiceGateway(t *testing.T) {
//
//		// make and configure a mocked ServiceGateway
//		mockedServiceGateway := &ServiceGatewayMock{
//			CreateServerFunc: func() error {
//				panic("mock out the CreateServer method")
//			},
//		}
//
//		// use mockedServiceGateway in code that requires ServiceGateway
//		// and then make assertions.
//
//	}
type ServiceGatewayMock struct {
	// CreateServerFunc mocks the CreateServer method.
	CreateServerFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// CreateServer holds details about calls to the CreateServer method.
		CreateServer []struct {
		}
	}
	lockCreateServer sync.RWMutex
}

// CreateServer calls CreateServerFunc.
func (mock *ServiceGatewayMock) CreateServer() error {
	if mock.CreateServerFunc == nil {
		panic("ServiceGatewayMock.CreateServerFunc: method is nil but ServiceGateway.CreateServer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCreateServer.Lock()
	mock.calls.CreateServer = append(mock.calls.CreateServer, callInfo)
	mock.lockCreateServer.Unlock()
	return mock.CreateServerFunc()
}

// CreateServerCalls gets all the calls that were made to CreateServer.
// Check the length with:
//
//	len(mockedServiceGateway.CreateServerCalls())
func (mock *ServiceGatewayMock) CreateServerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCreateServer.RLock()
	calls = mock.calls.CreateServer
	mock.lockCreateServer.RUnlock()
	return calls
}
