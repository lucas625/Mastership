// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package calculator

import (
	"net/http"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked Service
//		mockedService := &ServiceMock{
//			AddFunc: func(responseWriter http.ResponseWriter, request *http.Request)  {
//				panic("mock out the Add method")
//			},
//			DivideFunc: func(responseWriter http.ResponseWriter, request *http.Request)  {
//				panic("mock out the Divide method")
//			},
//			MultiplyFunc: func(responseWriter http.ResponseWriter, request *http.Request)  {
//				panic("mock out the Multiply method")
//			},
//			SubtractFunc: func(responseWriter http.ResponseWriter, request *http.Request)  {
//				panic("mock out the Subtract method")
//			},
//		}
//
//		// use mockedService in code that requires Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(responseWriter http.ResponseWriter, request *http.Request)

	// DivideFunc mocks the Divide method.
	DivideFunc func(responseWriter http.ResponseWriter, request *http.Request)

	// MultiplyFunc mocks the Multiply method.
	MultiplyFunc func(responseWriter http.ResponseWriter, request *http.Request)

	// SubtractFunc mocks the Subtract method.
	SubtractFunc func(responseWriter http.ResponseWriter, request *http.Request)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// ResponseWriter is the responseWriter argument value.
			ResponseWriter http.ResponseWriter
			// Request is the request argument value.
			Request *http.Request
		}
		// Divide holds details about calls to the Divide method.
		Divide []struct {
			// ResponseWriter is the responseWriter argument value.
			ResponseWriter http.ResponseWriter
			// Request is the request argument value.
			Request *http.Request
		}
		// Multiply holds details about calls to the Multiply method.
		Multiply []struct {
			// ResponseWriter is the responseWriter argument value.
			ResponseWriter http.ResponseWriter
			// Request is the request argument value.
			Request *http.Request
		}
		// Subtract holds details about calls to the Subtract method.
		Subtract []struct {
			// ResponseWriter is the responseWriter argument value.
			ResponseWriter http.ResponseWriter
			// Request is the request argument value.
			Request *http.Request
		}
	}
	lockAdd      sync.RWMutex
	lockDivide   sync.RWMutex
	lockMultiply sync.RWMutex
	lockSubtract sync.RWMutex
}

// Add calls AddFunc.
func (mock *ServiceMock) Add(responseWriter http.ResponseWriter, request *http.Request) {
	if mock.AddFunc == nil {
		panic("ServiceMock.AddFunc: method is nil but Service.Add was just called")
	}
	callInfo := struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}{
		ResponseWriter: responseWriter,
		Request:        request,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	mock.AddFunc(responseWriter, request)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedService.AddCalls())
func (mock *ServiceMock) AddCalls() []struct {
	ResponseWriter http.ResponseWriter
	Request        *http.Request
} {
	var calls []struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// Divide calls DivideFunc.
func (mock *ServiceMock) Divide(responseWriter http.ResponseWriter, request *http.Request) {
	if mock.DivideFunc == nil {
		panic("ServiceMock.DivideFunc: method is nil but Service.Divide was just called")
	}
	callInfo := struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}{
		ResponseWriter: responseWriter,
		Request:        request,
	}
	mock.lockDivide.Lock()
	mock.calls.Divide = append(mock.calls.Divide, callInfo)
	mock.lockDivide.Unlock()
	mock.DivideFunc(responseWriter, request)
}

// DivideCalls gets all the calls that were made to Divide.
// Check the length with:
//
//	len(mockedService.DivideCalls())
func (mock *ServiceMock) DivideCalls() []struct {
	ResponseWriter http.ResponseWriter
	Request        *http.Request
} {
	var calls []struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}
	mock.lockDivide.RLock()
	calls = mock.calls.Divide
	mock.lockDivide.RUnlock()
	return calls
}

// Multiply calls MultiplyFunc.
func (mock *ServiceMock) Multiply(responseWriter http.ResponseWriter, request *http.Request) {
	if mock.MultiplyFunc == nil {
		panic("ServiceMock.MultiplyFunc: method is nil but Service.Multiply was just called")
	}
	callInfo := struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}{
		ResponseWriter: responseWriter,
		Request:        request,
	}
	mock.lockMultiply.Lock()
	mock.calls.Multiply = append(mock.calls.Multiply, callInfo)
	mock.lockMultiply.Unlock()
	mock.MultiplyFunc(responseWriter, request)
}

// MultiplyCalls gets all the calls that were made to Multiply.
// Check the length with:
//
//	len(mockedService.MultiplyCalls())
func (mock *ServiceMock) MultiplyCalls() []struct {
	ResponseWriter http.ResponseWriter
	Request        *http.Request
} {
	var calls []struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}
	mock.lockMultiply.RLock()
	calls = mock.calls.Multiply
	mock.lockMultiply.RUnlock()
	return calls
}

// Subtract calls SubtractFunc.
func (mock *ServiceMock) Subtract(responseWriter http.ResponseWriter, request *http.Request) {
	if mock.SubtractFunc == nil {
		panic("ServiceMock.SubtractFunc: method is nil but Service.Subtract was just called")
	}
	callInfo := struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}{
		ResponseWriter: responseWriter,
		Request:        request,
	}
	mock.lockSubtract.Lock()
	mock.calls.Subtract = append(mock.calls.Subtract, callInfo)
	mock.lockSubtract.Unlock()
	mock.SubtractFunc(responseWriter, request)
}

// SubtractCalls gets all the calls that were made to Subtract.
// Check the length with:
//
//	len(mockedService.SubtractCalls())
func (mock *ServiceMock) SubtractCalls() []struct {
	ResponseWriter http.ResponseWriter
	Request        *http.Request
} {
	var calls []struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}
	mock.lockSubtract.RLock()
	calls = mock.calls.Subtract
	mock.lockSubtract.RUnlock()
	return calls
}
