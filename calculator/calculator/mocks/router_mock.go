// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/gorilla/mux"
	"github.com/lucas625/Mastership/calculator/calculator"
	"net/http"
	"sync"
)

// Ensure, that RouterMock does implement calculator.Router.
// If this is not the case, regenerate this file with moq.
var _ calculator.Router = &RouterMock{}

// RouterMock is a mock implementation of calculator.Router.
//
//	func TestSomethingThatUsesRouter(t *testing.T) {
//
//		// make and configure a mocked calculator.Router
//		mockedRouter := &RouterMock{
//			HandleFuncFunc: func(path string, f func(http.ResponseWriter, *http.Request)) *mux.Route {
//				panic("mock out the HandleFunc method")
//			},
//			ServeHTTPFunc: func(responseWriter http.ResponseWriter, request *http.Request)  {
//				panic("mock out the ServeHTTP method")
//			},
//		}
//
//		// use mockedRouter in code that requires calculator.Router
//		// and then make assertions.
//
//	}
type RouterMock struct {
	// HandleFuncFunc mocks the HandleFunc method.
	HandleFuncFunc func(path string, f func(http.ResponseWriter, *http.Request)) *mux.Route

	// ServeHTTPFunc mocks the ServeHTTP method.
	ServeHTTPFunc func(responseWriter http.ResponseWriter, request *http.Request)

	// calls tracks calls to the methods.
	calls struct {
		// HandleFunc holds details about calls to the HandleFunc method.
		HandleFunc []struct {
			// Path is the path argument value.
			Path string
			// F is the f argument value.
			F func(http.ResponseWriter, *http.Request)
		}
		// ServeHTTP holds details about calls to the ServeHTTP method.
		ServeHTTP []struct {
			// ResponseWriter is the responseWriter argument value.
			ResponseWriter http.ResponseWriter
			// Request is the request argument value.
			Request *http.Request
		}
	}
	lockHandleFunc sync.RWMutex
	lockServeHTTP  sync.RWMutex
}

// HandleFunc calls HandleFuncFunc.
func (mock *RouterMock) HandleFunc(path string, f func(http.ResponseWriter, *http.Request)) *mux.Route {
	if mock.HandleFuncFunc == nil {
		panic("RouterMock.HandleFuncFunc: method is nil but Router.HandleFunc was just called")
	}
	callInfo := struct {
		Path string
		F    func(http.ResponseWriter, *http.Request)
	}{
		Path: path,
		F:    f,
	}
	mock.lockHandleFunc.Lock()
	mock.calls.HandleFunc = append(mock.calls.HandleFunc, callInfo)
	mock.lockHandleFunc.Unlock()
	return mock.HandleFuncFunc(path, f)
}

// HandleFuncCalls gets all the calls that were made to HandleFunc.
// Check the length with:
//
//	len(mockedRouter.HandleFuncCalls())
func (mock *RouterMock) HandleFuncCalls() []struct {
	Path string
	F    func(http.ResponseWriter, *http.Request)
} {
	var calls []struct {
		Path string
		F    func(http.ResponseWriter, *http.Request)
	}
	mock.lockHandleFunc.RLock()
	calls = mock.calls.HandleFunc
	mock.lockHandleFunc.RUnlock()
	return calls
}

// ServeHTTP calls ServeHTTPFunc.
func (mock *RouterMock) ServeHTTP(responseWriter http.ResponseWriter, request *http.Request) {
	if mock.ServeHTTPFunc == nil {
		panic("RouterMock.ServeHTTPFunc: method is nil but Router.ServeHTTP was just called")
	}
	callInfo := struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}{
		ResponseWriter: responseWriter,
		Request:        request,
	}
	mock.lockServeHTTP.Lock()
	mock.calls.ServeHTTP = append(mock.calls.ServeHTTP, callInfo)
	mock.lockServeHTTP.Unlock()
	mock.ServeHTTPFunc(responseWriter, request)
}

// ServeHTTPCalls gets all the calls that were made to ServeHTTP.
// Check the length with:
//
//	len(mockedRouter.ServeHTTPCalls())
func (mock *RouterMock) ServeHTTPCalls() []struct {
	ResponseWriter http.ResponseWriter
	Request        *http.Request
} {
	var calls []struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}
	mock.lockServeHTTP.RLock()
	calls = mock.calls.ServeHTTP
	mock.lockServeHTTP.RUnlock()
	return calls
}
