// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/lucas625/Mastership/calculator/calculator"
	"sync"
)

// Ensure, that ServerMock does implement calculator.Server.
// If this is not the case, regenerate this file with moq.
var _ calculator.Server = &ServerMock{}

// ServerMock is a mock implementation of calculator.Server.
//
//	func TestSomethingThatUsesServer(t *testing.T) {
//
//		// make and configure a mocked calculator.Server
//		mockedServer := &ServerMock{
//			ListenAndServeFunc: func() error {
//				panic("mock out the ListenAndServe method")
//			},
//		}
//
//		// use mockedServer in code that requires calculator.Server
//		// and then make assertions.
//
//	}
type ServerMock struct {
	// ListenAndServeFunc mocks the ListenAndServe method.
	ListenAndServeFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// ListenAndServe holds details about calls to the ListenAndServe method.
		ListenAndServe []struct {
		}
	}
	lockListenAndServe sync.RWMutex
}

// ListenAndServe calls ListenAndServeFunc.
func (mock *ServerMock) ListenAndServe() error {
	if mock.ListenAndServeFunc == nil {
		panic("ServerMock.ListenAndServeFunc: method is nil but Server.ListenAndServe was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListenAndServe.Lock()
	mock.calls.ListenAndServe = append(mock.calls.ListenAndServe, callInfo)
	mock.lockListenAndServe.Unlock()
	return mock.ListenAndServeFunc()
}

// ListenAndServeCalls gets all the calls that were made to ListenAndServe.
// Check the length with:
//
//	len(mockedServer.ListenAndServeCalls())
func (mock *ServerMock) ListenAndServeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListenAndServe.RLock()
	calls = mock.calls.ListenAndServe
	mock.lockListenAndServe.RUnlock()
	return calls
}
