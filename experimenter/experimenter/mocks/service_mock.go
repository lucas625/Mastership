// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/lucas625/Mastership/experimenter-service/experimenter"
	"net/http"
	"sync"
)

// Ensure, that ServiceMock does implement experimenter.Service.
// If this is not the case, regenerate this file with moq.
var _ experimenter.Service = &ServiceMock{}

// ServiceMock is a mock implementation of experimenter.Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked experimenter.Service
//		mockedService := &ServiceMock{
//			ExperimentFunc: func(responseWriter http.ResponseWriter, request *http.Request)  {
//				panic("mock out the Experiment method")
//			},
//		}
//
//		// use mockedService in code that requires experimenter.Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// ExperimentFunc mocks the Experiment method.
	ExperimentFunc func(responseWriter http.ResponseWriter, request *http.Request)

	// calls tracks calls to the methods.
	calls struct {
		// Experiment holds details about calls to the Experiment method.
		Experiment []struct {
			// ResponseWriter is the responseWriter argument value.
			ResponseWriter http.ResponseWriter
			// Request is the request argument value.
			Request *http.Request
		}
	}
	lockExperiment sync.RWMutex
}

// Experiment calls ExperimentFunc.
func (mock *ServiceMock) Experiment(responseWriter http.ResponseWriter, request *http.Request) {
	if mock.ExperimentFunc == nil {
		panic("ServiceMock.ExperimentFunc: method is nil but Service.Experiment was just called")
	}
	callInfo := struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}{
		ResponseWriter: responseWriter,
		Request:        request,
	}
	mock.lockExperiment.Lock()
	mock.calls.Experiment = append(mock.calls.Experiment, callInfo)
	mock.lockExperiment.Unlock()
	mock.ExperimentFunc(responseWriter, request)
}

// ExperimentCalls gets all the calls that were made to Experiment.
// Check the length with:
//
//	len(mockedService.ExperimentCalls())
func (mock *ServiceMock) ExperimentCalls() []struct {
	ResponseWriter http.ResponseWriter
	Request        *http.Request
} {
	var calls []struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}
	mock.lockExperiment.RLock()
	calls = mock.calls.Experiment
	mock.lockExperiment.RUnlock()
	return calls
}
